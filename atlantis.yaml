version: 3
automerge: true
parallel_apply: true
parallel_plan: true
projects:
  - &template_ci_cd
    dir: template_ci_cd
    workflow: terragrunt
    autoplan:
      enabled: false
      when_modified:
        - "../../../../../../../../../modules/accelerator/**/*.tf"
        - "**/*.hcl"
  - &template_infra
    dir: template_infra
#    apply_requirements: [approved]
    workflow: terragrunt
    autoplan:
      enabled: false
      when_modified:
        - "../../../../../../../../modules/application-infrastructure/**/*.tf"
        - "**/*.hcl"

  - <<: *template_ci_cd
    dir: <your-path-to-terragrunt-dir-ci-cd>

  - <<: *template_infra
    dir: <your-path-to-terragrunt-dir-infrastructure-module

# https://www.runatlantis.io/docs/server-side-repo-config.html#allow-repos-to-define-their-own-workflows
workflows:
  terragrunt: #================= Terragrunt Workflow =============================#
    plan:
      steps:
      # change branches
        - env:
            name: BASE_BRANCH_NAME
            value: master
        - env:
            name: HEAD_BRANCH_NAME
            value: develop
        - env:
            name: DESTROY_PARAMETER
            command: if [ "$COMMENT_ARGS" = "\-\d\e\s\t\r\o\y" ]; then echo "-destroy"; else echo ""; fi
        - env:
            name: TF_VAR_auth_token
            command: 'aws ssm get-parameter --name "/vcs/user/token" --with-decryption | jq .Parameter.Value -r'
        - env:
            name: INFRACOST_API_KEY
            command: 'aws ssm get-parameter --name "/infracost/api/key" --with-decryption | jq .Parameter.Value -r'
        - env:
            name: OPENAI_TOKEN
            command: 'aws ssm get-parameter --name "/accelerator/openai_token" --with-decryption | jq .Parameter.Value -r'
        - env:
            name: INFRACOST
            value: 1
        - env: # If you want to use tfsec, set the value to 1, otherwise 0.
            name: TFSEC
            value: 0
        - env: # If you want to use checkov, set the value to 1, otherwise 0.
            name: CHECKOV
            value: 0
        - env: # If you want to use regula, set the value to 1, otherwise 0.
            name: REGULA
            value: 1
        - env: # If we enable AI Handler
            name: AI_HANDLER
            value: 0

        - run: atlantis version
        - run: terraform version
        - run: terragrunt --version
        - run: infracost --version
        - run: pip --version
        - run: python3 --version
        - run: terragrunt validate -no-color 2> error_raw.log || cat error_raw.log | grep -v "validate_tflint" > error.log
        - run: if [ -s "error.log" ];
            then
            echo "Error log print" && cat error.log;
            fi
        - run: if [ $AI_HANDLER == 1 ] && [ -s "error.log" ];
            then
            source /home/atlantis/.venv/bin/activate && echo "Validate issue. Checking with OpenAI" && python3 /home/atlantis/.atlantis/repos/${BASE_REPO_OWNER}/${BASE_REPO_NAME}/${PULL_NUM}/${WORKSPACE}/scripts_ai/ai_analyzer.py && deactivate;
            fi
        - run: terragrunt plan -out $PLANFILE $DESTROY_PARAMETER -no-color 2> error_raw.log || cat error_raw.log | grep -v "validate_tflint" > error.log
        - run: if [ -s "error.log" ];
            then
            echo "Error log print" && cat error.log;
            fi
        - run: if [ $AI_HANDLER == 1 ] && [ -s "error.log" ];
            then
            source /home/atlantis/.venv/bin/activate && echo "Plan issue. Checking with OpenAI" && python3 /home/atlantis/.atlantis/repos/${BASE_REPO_OWNER}/${BASE_REPO_NAME}/${PULL_NUM}/${WORKSPACE}/scripts_ai/ai_analyzer.py && deactivate;
            fi
        - run: terragrunt show -json $PLANFILE > $SHOWFILE
        - run: if [ $CHECKOV == 1 ];
            then
            echo "------ Checkov Report ------"; source /home/atlantis/.venv/bin/activate; checkov -d . --quiet; deactivate; echo "-------------------------------------";
            fi
        - run: if [ $TFSEC == 1 ];
            then
            echo "------ TFSec Report ------" && tfsec --no-colour --soft-fail --concise-output --exclude AWS005 . ; echo "-------------------------------------";
            fi
        - run: if [ $REGULA == 1 ];
            then
            echo "------ Regula Report ------" && regula run -t tf-plan $SHOWFILE > regula_report.log && regula_report.log || cat regula_report.log && echo "-------------------------------------";
            fi
        - run: if [ $AI_HANDLER == 1 ] && [ -s "regula_report.log" ] && ! grep -q "No problems found" regula_report.log;
            then
            source /home/atlantis/.venv/bin/activate && echo "Regula issue. Checking with OpenAI" && python3 /home/atlantis/.atlantis/repos/${BASE_REPO_OWNER}/${BASE_REPO_NAME}/${PULL_NUM}/${WORKSPACE}/scripts_ai/regula_analyzer.py && deactivate;
            fi
        - run: if [ $INFRACOST == 1 ];
            then
            echo "------ Infracost Report ------" && infracost breakdown --path $SHOWFILE ; echo "-------------------------------------";
            fi

    apply:
      steps:
        - env: # If you want to use cloud custodian, set the value to 1, otherwise 0.
            name: CUSTODIAN
            value: 0

        - env: # EPAM Custodian variables; set the value to 1 to use, otherwise 0.
            name: C7N_EPAM
            value: 0
        - env:
            name: C7N_PASSWORD
            command: 'aws ssm get-parameter --name "/C7N/PASSWORD" --with-decryption | jq .Parameter.Value -r'
        - env:
            name: C7N_API
            command: 'aws ssm get-parameter --name "/C7N/Api" --with-decryption | jq .Parameter.Value -r'
        - env:
            name: C7N_USER
            command: 'aws ssm get-parameter --name "/C7N/user" --with-decryption | jq .Parameter.Value -r'
        - env:
            name: GITHUB_TOKEN
            command: 'aws ssm get-parameter --name "/atlantis/github/user/token" --with-decryption | jq .Parameter.Value -r'
        - env:
            name: OPENAI_TOKEN
            command: 'aws ssm get-parameter --name "/accelerator/openai_token" --with-decryption | jq .Parameter.Value -r'

        - run: terragrunt apply $PLANFILE -no-color 2> error.log
        - run: if [ -s "error.log" ];
            then
            echo "Error log print" && cat error.log;
            fi
        - run: if [ $AI_HANDLER == 1 ] && [ -s "error.log" ];
            then
            source /home/atlantis/.venv/bin/activate && echo "Apply issue. Checking with OpenAI" && python3 /home/atlantis/.atlantis/repos/${BASE_REPO_OWNER}/${BASE_REPO_NAME}/${PULL_NUM}/${WORKSPACE}/scripts_ai/ai_analyzer.py && deactivate;
            fi
        - run: if [ $CUSTODIAN == 1 ];
            then
            echo "------ Cloud Custodian Report ------" && custodian run --output-dir=. /home/atlantis/.atlantis/repos/${BASE_REPO_OWNER}/${BASE_REPO_NAME}/${PULL_NUM}/${WORKSPACE}/custodian.yml && echo "-------------------------------------";
            fi

        - run: if [ $C7N_EPAM == 1 ];
            then
            echo "------ EPAM Custodian Report ------" && timeout 600 /home/atlantis/.atlantis/repos/${BASE_REPO_OWNER}/${BASE_REPO_NAME}/${PULL_NUM}/${WORKSPACE}/custodian.sh && echo "-------------------------------------";
            fi
